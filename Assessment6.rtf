{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\froman\fcharset0 inherit;}{\f1\fswiss\fprq2\fcharset0 Helvetica;}{\f2\fmodern JetBrains Mono;}{\f3\fswiss\fprq2\fcharset0 Calibri;}{\f4\fmodern\fprq1\fcharset0 Courier New;}{\f5\fnil\fcharset1 Cambria Math;}{\f6\fnil\fcharset0 Calibri;}{\f7\fnil\fcharset2 Symbol;}}
{\colortbl ;\red0\green0\blue0;\red204\green120\blue50;\red255\green198\blue109;\red169\green183\blue198;\red104\green151\blue187;\red136\green136\blue198;\red106\green135\blue89;\red255\green255\blue255;\red239\green240\blue241;\red114\green115\blue122;\red170\green73\blue38;}
{\*\generator Riched20 10.0.19041}{\*\mmathPr\mmathFont5\mwrapIndent1440 }\viewkind4\uc1 
\pard\widctlpar\sb129\cf1\kerning36\b\f0\fs39 Function Practice Exercises\par

\pard\widctlpar\sb240\kerning0\b0\f1\fs21 Problems are arranged in increasing difficulty:\par

\pard{\pntext\f7\'B7\tab}{\*\pn\pnlvlblt\pnf7\pnindent360{\pntxtb\'B7}}\fi-360\li720\sb100\sa100 Warmup - these can be solved using basic comparisons and methods\par
{\pntext\f7\'B7\tab}Level 1 - these may involve if/then conditional statements and simple methods\par
{\pntext\f7\'B7\tab}Level 2 - these may require iterating over sequences, usually with some kind of loop\par
{\pntext\f7\'B7\tab}Challenging - these will take some creativity to solve\par

\pard\widctlpar\sb153\b\f0\fs33 WARMUP SECTION:\par

\pard\widctlpar\sb240\fs21 Problem 1:\par
\b0\f1 LESSER OF TWO EVENS: Write a function that returns the lesser of two given numbers\~\i if\i0\~both numbers are even, but returns the greater if one or both numbers are odd lesser_of_two_evens(2,4) --> 2 lesser_of_two_evens(2,5) --> 5\par

\pard\box\brdrdash\brdrw0 \sb240\cf2\f2\fs20 def \cf3 FUN\cf4 (a\cf2 ,\cf4 b):\line     \cf2 if \cf4 a%\cf5 2\cf4 ==\cf5 0 \cf2 and \cf4 b%\cf5 2\cf4 ==\cf5 0\cf4 :\line         \cf2 if \cf4 a>b:\line             \cf6 print\cf4 (\cf7 'even :'\cf2 ,\cf4 a\cf2 , \cf7 'is greater'\cf4 )\line         \cf2 elif \cf4 b>a:\line             \cf6 print\cf4 (\cf7 'even :'\cf2 ,\cf4 b\cf2 ,\cf7 ' is greater'\cf4 )\line     \cf2 elif \cf4 a%\cf5 2\cf4 !=\cf5 0 \cf2 and \cf4 b%\cf5 2\cf4 !=\cf5 0\cf4 :\line         \cf2 if \cf4 a<b:\line             \cf6 print\cf4 (\cf7 'even :'\cf2 ,\cf4 a\cf2 ,\cf7 ' is smaller'\cf4 )\line         \cf2 elif \cf4 b<a:\line             \cf6 print\cf4 (\cf7 'even :'\cf2 ,\cf4 b\cf2 ,\cf7 ' is smaller'\cf4 )\line     \cf2 else\cf4 :\line         \cf6 print\cf4 (\cf7 'Both are not of same category or same no.'\cf4 )\line\line FUN(\cf5 3\cf2 ,\cf5 5\cf4 )\par

\pard\widctlpar\sb240\cf1\b\f0\fs21 Problem 2:\par
\b0\f1 ANIMAL CRACKERS: Write a function takes a two-word string and returns True if both words begin with same letter animal_crackers('Levelheaded Llama') --> True animal_crackers('Crazy Kangaroo') --> False\par
\par

\pard\box\brdrdash\brdrw0 \sa160\sl252\slmult1\cf2\f2\fs20 def \cf3 FUN\cf4 (c):\line     b=c.lower()\line     a = b.split()\line     \cf2 if \cf4 a[\cf5 0\cf4 ][\cf5 0\cf4 ] == a[\cf5 1\cf4 ][\cf5 0\cf4 ]:\line         \cf6 print\cf4 (\cf7 'True'\cf4 )\line     \cf2 else\cf4 :\line         \cf6 print\cf4 (\cf7 'False'\cf4 )\line\line FUN(\cf7 'Words word'\cf4 )\cf0\f3\fs22\par

\pard\widctlpar\sb240\cf1\b\f0\fs21 Problem 3:\par
\b0\f1 MAKES TWENTY: Given two integers, return True if the sum of the integers is 20\~\i or\i0\~if one of the integers is 20. If not, return False\par

\pard\cbpat8\widctlpar\li480\ri480\sb240\sa240\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\highlight8\f4 makes_twenty(20,10) --> True\par
makes_twenty(12,8) --> True\par
makes_twenty(2,3) --> False\highlight0\par

\pard\box\brdrdash\brdrw0 \sa160\sl252\slmult1\cf2\f2\fs20 def \cf3 FUN\cf4 (a\cf2 ,\cf4 b):\line     \cf2 if \cf4 a+b==\cf5 20 \cf2 or \cf4 a==\cf5 20 \cf2 or \cf4 b==\cf5 20\cf4 :\line         \cf6 print\cf4 (\cf2 True\cf4 )\line     \cf2 else\cf4 :\line         \cf6 print\cf4 (\cf2 False\cf4 )\line\line FUN(\cf5 20\cf2 ,\cf5 1\cf4 )\par

\pard\widctlpar\sa160\sl252\slmult1\cf0\f3\fs22\par

\pard\widctlpar\sb129\cf1\kerning36\b\f0\fs39 LEVEL 1 PROBLEMS\par

\pard\widctlpar\sb240\kerning0\fs21 Problem 4:\par
\b0\f1 OLD MACDONALD: Write a function that capitalizes the first and fourth letters of a name\par

\pard\cbpat8\widctlpar\li480\ri480\sb240\sa240\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\highlight8\f4 old_macdonald('macdonald') --> MacDonald\highlight0\par

\pard\widctlpar\sb240\f1 Note:\~\highlight9\f4 'macdonald'.capitalize()\highlight0\f1\~returns\~\highlight9\f4 'Macdonald'\highlight0\f1\par

\pard\widctlpar\sa160\sl252\slmult1\cf0\f3\fs22\par

\pard\box\brdrdash\brdrw0 \sa160\sl252\slmult1\cf2\f2\fs20 def \cf3 FUN\cf4 (x):\line     a=x[\cf5 0\cf4 ].capitalize() + x[\cf5 1\cf4 :\cf5 3\cf4 ]\line     b=x[\cf5 3\cf4 ].capitalize() + x[\cf5 4\cf4 :]\line     c=a+b\line     \cf6 print\cf4 (c)\line FUN(\cf7 'Aman Gupta'\cf4 )\par

\pard\widctlpar\sb240\cf1\b\f0\fs21 Problem 5:\par
\b0\f1 ALMOST THERE: Given an integer n, return True if n is within 10 of either 100 or 200\par

\pard\cbpat8\widctlpar\li480\ri480\sb240\sa240\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\highlight8\f4 almost_there(90) --> True\par
almost_there(104) --> True\par
almost_there(150) --> False\par
almost_there(209) --> True\par

\pard\box\brdrdash\brdrw0 \li480\ri480\sb240\sa240\cf2\highlight0\f2\fs20 def \cf3 FUN\cf4 (x):\line     \cf2 if \cf4 x \cf2 in \cf6 range\cf4 (\cf5 90\cf2 ,\cf5 111\cf4 ) \cf2 or \cf4 x \cf2 in \cf6 range\cf4 (\cf5 190\cf2 ,\cf5 211\cf4 ):\line         \cf6 print\cf4 (\cf2 True\cf4 )\line     \cf2 else\cf4 :\line         \cf6 print\cf4 (\cf2 False\cf4 )\line FUN(\cf5 90\cf4 )\line\cf1\f4\fs21\par

\pard\widctlpar\sb240\f1 NOTE:\~\highlight9\f4 abs(num)\highlight0\f1\~returns the absolute value of a number\par

\pard\widctlpar\sa160\sl252\slmult1\cf0\f3\fs22\par

\pard\widctlpar\sb129\cf1\kerning36\b\f0\fs39 LEVEL 2 PROBLEMS\par

\pard\widctlpar\sb240\kerning0\fs21 Problem 6:\par
\b0\f1 Given a list of ints, return True if the array contains a 3 next to a 3 somewhere.\par

\pard\cbpat8\widctlpar\li480\ri480\sb240\sa240\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\highlight8\f4 has_33([1, 3, 3]) \f5\u8594?\f4\lang1033  True\par
has_33([1, 3, 1, 3]) \f5\u8594?\f4\lang1033  False\par
has_33([3, 1, 3]) \f5\u8594?\f4\lang1033  False\highlight0\par

\pard\box\brdrdash\brdrw0 \sa160\sl252\slmult1\cf2\f2\fs20 def \cf3 FUN\cf4 (x):\line     \cf2 for \cf4 i \cf2 in \cf6 range\cf4 (\cf6 len\cf4 (x)):\line         \cf2 if \cf4 x[i]==\cf5 3 \cf2 and \cf4 x[i-\cf5 1\cf4 ]==\cf5 3\cf4 :\line             \cf6 print\cf4 (\cf2 True\cf4 )\line             \cf2 break\line     else\cf4 :\line         \cf6 print\cf4 (\cf2 False\cf4 )\line FUN([\cf5 7\cf2 ,\cf5 3\cf2 ,\cf5 3\cf2 ,\cf5 3\cf4 ])\line\cf0\f3\fs22\par

\pard\widctlpar\sb240\cf1\b\f0\fs21 Problem 7:\par
\b0\f1 PAPER DOLL: Given a string, return a string where for every character in the original there are three characters paper_doll('Hello') --> 'HHHeeellllllooo' paper_doll('Mississippi') --> 'MMMiiissssssiiippppppiii'\par

\pard\widctlpar\sa160\sl252\slmult1\cf0\f3\fs22\par

\pard\box\brdrdash\brdrw0 \sa160\sl252\slmult1\cf2\f2\fs20 def \cf3 FUN\cf4 (x):\line     \cf10 c \cf4 = \cf7 ''\line     \cf2 for \cf4 i \cf2 in \cf4 x:\line         c = i * \cf5 3\line         \cf6 print\cf4 (c\cf2 , \cf11 end\cf4 =\cf7 ''\cf4 )\line FUN(\cf7 'Mississsippi'\cf4 )\cf0\f3\fs22\par

\pard\widctlpar\sb240\cf1\b\f0\fs21 Problem 8:\par
\b0\f1 BLACKJACK: Given three integers between 1 and 11, if their sum is less than or equal to 21, return their sum. If their sum exceeds 21\~\i and\i0\~there's an eleven, reduce the total sum by 10. Finally, if the sum (even after adjustment) exceeds 21, return 'BUST' blackjack(5,6,7) --> 18 blackjack(9,9,9) --> 'BUST' blackjack(9,9,11) --> 19\par

\pard\widctlpar\sa160\sl252\slmult1\cf0\f3\fs22\par

\pard\box\brdrdash\brdrw0 \sb240\cf4\fs20\line\cf2\f2 def \cf3 black_jack\cf4 (a\cf2 ,\cf4 b\cf2 ,\cf4 c):\line     \cf2 if \cf4 a \cf2 in\cf4 (\cf5 1\cf2 ,\cf5 2\cf2 ,\cf5 3\cf2 ,\cf5 4\cf2 ,\cf5 5\cf2 ,\cf5 6\cf2 ,\cf5 7\cf2 ,\cf5 8\cf2 ,\cf5 9\cf2 ,\cf5 10\cf2 ,\cf5 11\cf4 ) \cf2 and \cf4 b \cf2 in\cf4 (\cf5 1\cf2 ,\cf5 2\cf2 ,\cf5 3\cf2 ,\cf5 4\cf2 ,\cf5 5\cf2 ,\cf5 6\cf2 ,\cf5 7\cf2 ,\cf5 8\cf2 ,\cf5 9\cf2 ,\cf5 10\cf2 ,\cf5 11\cf4 ) \cf2 and \cf4 c \cf2 in\cf4 (\cf5 1\cf2 ,\cf5 2\cf2 ,\cf5 3\cf2 ,\cf5 4\cf2 ,\cf5 5\cf2 ,\cf5 6\cf2 ,\cf5 7\cf2 ,\cf5 8\cf2 ,\cf5 9\cf2 ,\cf5 10\cf2 ,\cf5 11\cf4 ):\line         sum = a + b + c\line         \cf2 if \cf4 sum <= \cf5 21\cf4 :\line             \cf6 print\cf4 (\cf7 'Sum is less than 21'\cf2 ,\cf4 sum)\line         \cf2 elif \cf4 sum > \cf5 21 \cf2 and \cf5 11 \cf2 in\cf4 (a\cf2 , \cf4 b\cf2 , \cf4 c):\line             \cf6 print\cf4 (\cf7 'Sum is greater than 21:'\cf2 ,\cf4 sum)\line             sum = sum - \cf5 10\line             \cf6 print\cf4 (\cf7 'Sum-21='\cf2 ,\cf4 sum)\line             \cf2 if \cf4 sum > \cf5 21\cf4 :\line                 \cf6 print\cf4 (\cf7 'BUST'\cf4 )\line             \cf2 else\cf4 :\line                 \cf6 print\cf4 (\cf7 'Sum is less after substracted by 10'\cf4 )\line         \cf2 else\cf4 :\line             \cf6 print\cf4 (\cf7 'Greater than 21 but not having 11'\cf4 )\line     \cf2 else\cf4 :\line         \cf6 print\cf4 (\cf7 'Write under 12'\cf4 )\par

\pard\widctlpar\sb240\cf1\b\f0\fs21 Problem 9:\par
\b0\f1 SUMMER OF '69: Return the sum of the numbers in the array, except ignore sections of numbers starting with a 6 and extending to the next 9 (every 6 will be followed by at least one 9). Return 0 for no numbers.\par

\pard\cbpat8\widctlpar\li480\ri480\sb240\sa240\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\highlight8\f4 summer_69([1, 3, 5]) --> 9\par
summer_69([4, 5, 6, 7, 8, 9]) --> 9\par
summer_69([2, 1, 6, 9, 11]) --> 14\highlight0\par

\pard\box\brdrdash\brdrw0 \sa160\sl252\slmult1\cf2\f2\fs20 def \cf3 FUN\cf4 (x):\line     y = []\line     a=x.index(\cf5 6\cf4 )\line     b=(x.index(\cf5 9\cf4 )) + \cf5 1\line     \cf2 for \cf4 i \cf2 in \cf6 range\cf4 (a\cf2 ,\cf4 b):\line         y.append(x[i])\line     Total = \cf6 sum\cf4 (x) - \cf6 sum\cf4 (y)\line     \cf6 print\cf4 (Total)\line\line FUN([\cf5 4\cf2 ,\cf5 5\cf2 ,\cf5 6\cf2 ,\cf5 7\cf2 ,\cf5 8\cf2 ,\cf5 9\cf4 ])\par

\pard\widctlpar\sa160\sl252\slmult1\cf0\f3\fs22\par

\pard\widctlpar\sb129\cf1\kerning36\b\f0\fs39 CHALLENGING PROBLEMS\par

\pard\widctlpar\sb240\kerning0\fs21 Problem 10:\par
\b0\f1 SPY GAME: Write a function that takes in a list of integers and returns True if it contains 007 in order\par

\pard\cbpat8\widctlpar\li480\ri480\sb240\sa240\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\highlight8\f4  spy_game([1,2,4,0,0,7,5]) --> True\par
 spy_game([1,0,2,4,0,5,7]) --> True\par
 spy_game([1,7,2,0,4,5,0]) --> False\par

\pard\box\brdrdash\brdrw0 \li480\ri480\sb240\sa240\cf2\highlight0\f2\fs20 def \cf3 FUN\cf4 (x):\line     \cf2 for \cf4 i \cf2 in \cf6 range\cf4 (\cf6 len\cf4 (x)):\line         \cf2 if \cf4 x[i]==\cf5 0 \cf2 and \cf4 x[i+\cf5 1\cf4 ]==\cf5 0 \cf2 and \cf4 x[i+\cf5 2\cf4 ]==\cf5 7\cf4 :\line             \cf6 print\cf4 (\cf2 True\cf4 )\line             \cf2 break\line     else\cf4 :\line         \cf6 print\cf4 (\cf2 False\cf4 )\line FUN([\cf5 0\cf2 ,\cf5 0\cf2 ,\cf5 1\cf2 ,\cf5 7\cf2 ,\cf5 9\cf4 ])\cf1\f4\fs21\par

\pard\widctlpar\sb240\b\f0 Problem 11:\par
\b0\f1 COUNT PRIMES: Write a function that returns the\~\i number\i0\~of prime numbers that exist up to and including a given number count_primes(100) --> 25\par
By convention, 0 and 1 are not prime.\par

\pard\box\brdrdash\brdrw0 \sa160\sl252\slmult1\cf2\f2\fs20 def \cf3 FUN\cf4 (a):\line     count = \cf5 0\line     \cf2 for \cf4 a \cf2 in \cf6 range\cf4 (a\cf2 ,\cf5 100\cf4 ):\line         \cf2 if \cf4 a >= \cf5 2\cf4 :\line             \cf2 for \cf4 i \cf2 in \cf6 range\cf4 (\cf5 2\cf2 , \cf4 a):\line                 \cf2 if \cf4 a % i == \cf5 0\cf4 :\line                     \cf2 break\line             else\cf4 :\line                 count += \cf5 1\line                 \cf6 print\cf4 (a)\line         \cf2 else\cf4 :\line             \cf6 print\cf4 (\cf7 'Take above 1'\cf4 )\line             \cf2 break\line     \cf6 print\cf4 (\cf7 'Total prime no'\cf2 ,\cf4 count)\line FUN(\cf5 2\cf4 )\line\cf0\f3\fs22\par

\pard\widctlpar\sb480\cf1\b\f0\fs21 Problem 12:\par

\pard\widctlpar\sb240\b0\f1 PRINT BIG: Write a function that takes in a single letter, and returns a 5x5 representation of that letter print_big('a')\par

\pard\cbpat8\widctlpar\li480\ri480\sb240\sa240\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\highlight8\f4 out:   *  \par
      * *\par
     *****\par
     *   *\par
     *   *\highlight0\par

\pard\widctlpar\sb240\f1 HINT: Consider making a dictionary of possible patterns, and mapping the alphabet to specific 5-line combinations of patterns.\line For purposes of this exercise, it's ok if your dictionary stops at "E".\par

\pard\widctlpar\sa160\sl252\slmult1\cf0\f3\fs22\par

\pard\box\brdrdash\brdrw0 \sa160\sl252\slmult1\cf2\f2\fs20 for \cf4 i \cf2 in \cf6 range\cf4 (\cf5 0\cf2 ,\cf5 7\cf4 ):\line     \cf2 for \cf4 j \cf2 in \cf6 range\cf4 (\cf5 0\cf2 ,\cf5 8\cf4 ):\line         \cf2 if\cf4 (((j==\cf5 1 \cf2 or \cf4 j==\cf5 7\cf4 )\cf2 and\cf4 (i!=\cf5 0\cf4 )) \cf2 or \cf4 ((i==\cf5 0 \cf2 or \cf4 i==\cf5 3\cf4 )\cf2 and\cf4 (j>\cf5 1 \cf2 and \cf4 j<\cf5 7\cf4 ))):\line             \cf6 print\cf4 (\cf7 'A'\cf2 ,\cf11 end\cf4 =\cf7 ''\cf4 )\line         \cf2 else\cf4 :\line             \cf6 print\cf4 (\cf7 ' '\cf2 ,\cf11 end\cf4 =\cf7 ''\cf4 )\line     \cf6 print\cf4 (\cf7 ''\cf4 )\par

\pard\widctlpar\sa160\sl252\slmult1\cf0\f3\fs22\par
\par

\pard\box\brdrdash\brdrw0 \sa160\sl252\slmult1\cf2\f2\fs20 for \cf4 a \cf2 in \cf6 range\cf4 (\cf5 0\cf2 , \cf5 7\cf4 ):\line     \cf2 for \cf4 b \cf2 in \cf6 range\cf4 (\cf5 0\cf2 , \cf5 7\cf4 ):\line         \cf2 if \cf4 (((a == \cf5 0 \cf2 or \cf4 a == \cf5 3 \cf2 or \cf4 a == \cf5 6\cf4 ) \cf2 and \cf4 (b > \cf5 0 \cf2 and \cf4 b < \cf5 6\cf4 )) \cf2 or \cf4 (b == \cf5 0\cf4 ) \cf2 or \cf4 (\line                 (a == \cf5 1 \cf2 or \cf4 a == \cf5 2 \cf2 or \cf4 a == \cf5 4 \cf2 or \cf4 a == \cf5 5\cf4 ) \cf2 and \cf4 (b == \cf5 6\cf4 ))):\line             \cf6 print\cf4 (\cf7 'B'\cf2 , \cf11 end\cf4 =\cf7 ''\cf4 )\line         \cf2 else\cf4 :\line             \cf6 print\cf4 (\cf7 ' '\cf2 , \cf11 end\cf4 =\cf7 ''\cf4 )\line     \cf6 print\cf4 (\cf7 ''\cf4 )\par

\pard\widctlpar\sa160\sl252\slmult1\cf0\f3\fs22\par
\par

\pard\box\brdrdash\brdrw0 \sa160\sl252\slmult1\cf4\fs20\line\cf2\f2 for \cf4 a \cf2 in \cf6 range\cf4 (\cf5 0\cf2 , \cf5 7\cf4 ):\line     \cf2 for \cf4 b \cf2 in \cf6 range\cf4 (\cf5 0\cf2 , \cf5 7\cf4 ):\line         \cf2 if \cf4 (((a == \cf5 0 \cf2 or \cf4 a == \cf5 6\cf4 ) \cf2 and \cf4 (b > \cf5 1 \cf2 and \cf4 b < \cf5 7\cf4 )) \cf2 or \cf4 ((b == \cf5 1\cf4 ) \cf2 and \cf4 (a != \cf5 0 \cf2 and \cf4 a != \cf5 6\cf4 ))):\line             \cf6 print\cf4 (\cf7 'C'\cf2 , \cf11 end\cf4 =\cf7 ''\cf4 )\line         \cf2 else\cf4 :\line             \cf6 print\cf4 (\cf7 ' '\cf2 , \cf11 end\cf4 =\cf7 ''\cf4 )\line     \cf6 print\cf4 (\cf7 ''\cf4 )\par

\pard\widctlpar\sa160\sl252\slmult1\cf0\f3\fs22\par
\par

\pard\box\brdrdash\brdrw0 \sa160\sl252\slmult1\cf4\fs20\line\cf2\f2 for \cf4 a \cf2 in \cf6 range\cf4 (\cf5 0\cf2 ,\cf5 7\cf4 ):\line     \cf2 for \cf4 b \cf2 in \cf6 range\cf4 (\cf5 0\cf2 , \cf5 7\cf4 ):\line         \cf2 if \cf4 (((a==\cf5 0 \cf2 or \cf4 a==\cf5 6\cf4 )\cf2 and\cf4 (b>\cf5 0\cf2 and \cf4 b<\cf5 6\cf4 ))  \cf2 or\cf4 (b==\cf5 0\cf4 ) \cf2 or\cf4 (b==\cf5 6 \cf2 and \cf4 a!=\cf5 0 \cf2 and \cf4 a!=\cf5 6\cf4 )):\line             \cf6 print\cf4 (\cf7 'D'\cf2 , \cf11 end\cf4 =\cf7 ''\cf4 )\line         \cf2 else\cf4 :\line             \cf6 print\cf4 (\cf7 ' '\cf2 , \cf11 end\cf4 =\cf7 ''\cf4 )\line     \cf6 print\cf4 (\cf7 ''\cf4 )\par

\pard\widctlpar\sa160\sl252\slmult1\cf0\f3\fs22\par
\par

\pard\box\brdrdash\brdrw0 \sa160\sl252\slmult1\cf4\fs20\line\cf2\f2 for \cf4 a \cf2 in \cf6 range\cf4 (\cf5 0\cf2 ,\cf5 7\cf4 ):\line     \cf2 for \cf4 b \cf2 in \cf6 range\cf4 (\cf5 0\cf2 ,\cf5 7\cf4 ):\line         \cf2 if\cf4 (  ((a==\cf5 0 \cf2 or \cf4 a==\cf5 3 \cf2 or \cf4 a==\cf5 6\cf4 ) \cf2 and \cf4 (b>\cf5 1 \cf2 and \cf4 b<\cf5 7\cf4 )) \cf2 or\cf4 (b==\cf5 0\cf4 ) ):\line             \cf6 print\cf4 (\cf7 'E'\cf2 ,\cf11 end\cf4 =\cf7 ''\cf4 )\line         \cf2 else\cf4 :\line             \cf6 print\cf4 (\cf7 ' '\cf2 ,\cf11 end\cf4 =\cf7 ''\cf4 )\line     \cf6 print\cf4 (\cf7 ''\cf4 )\line\par

\pard\widctlpar\sa160\sl252\slmult1\cf0\f3\fs22\par
\par

\pard\widctlpar\cf1\f1\fs21 Problem 13:\~\b Write a Python function that accepts a string and calculates the number of upper case letters and lower case letters.\b0\par

\pard\cbpat8\widctlpar\li480\ri480\sb240\sa240\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\highlight8\f4 Sample String : 'Hello Mr. Rogers, how are you this fine Tuesday?'\par
Expected Output : \par
No. of Upper case characters : 4\par
No. of Lower case Characters : 33\par

\pard\box\brdrdash\brdrw0 \li480\ri480\sb240\sa240\cf2\highlight0\f2\fs20 def \cf3 FUN\cf4 (a):\line     Capital = \cf5 0\line     \cf4 Small = \cf5 0\line     \cf2 for \cf4 i \cf2 in \cf4 a:\line         \cf2 if \cf4 i.isupper():\line             Capital += \cf5 1\line         \cf2 elif \cf4 i.islower():\line             Small += \cf5 1\line     \cf6 print\cf4 (\cf7 'Small'\cf2 , \cf4 Small\cf2 , \cf7 'Capital'\cf2 , \cf4 Capital)\line     \line FUN(\cf7 'Mohnish Hari Sawan'\cf4 )\cf1\f4\fs21\par

\pard\widctlpar\f1 Problem 14:\~\b Write a Python function that takes a list and returns a new list with unique elements of the first list.\b0\par

\pard\cbpat8\widctlpar\li480\ri480\sb240\sa240\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\highlight8\f4 Sample List : [1,1,1,1,2,2,3,3,3,3,4,5]\par
Unique List : [1, 2, 3, 4, 5]\par

\pard\box\brdrdash\brdrw0 \li480\ri480\sb240\sa240\cf2\highlight0\f2\fs20 def \cf3 FUN\cf4 (a):\line     b = []\line     \cf2 for \cf4 x \cf2 in \cf4 a:\line         \cf2 if \cf4 x \cf2 not in \cf4 b:\line             b.append(x)\line     \cf6 print\cf4 (b)\line\line FUN([\cf5 1\cf2 ,\cf5 1\cf2 ,\cf5 1\cf2 ,\cf5 1\cf2 ,\cf5 2\cf2 ,\cf5 2\cf2 ,\cf5 3\cf2 ,\cf5 3\cf2 ,\cf5 3\cf2 ,\cf5 3\cf2 ,\cf5 4\cf2 ,\cf5 5\cf4 ])\cf1\f4\fs21\par

\pard\widctlpar\f1 Problem 14:\~\b Write a Python function to multiply all the numbers in a list.\par

\pard\box\brdrdash\brdrw0 \cf2\b0\f2\fs20 def \cf3 FUN\cf4 (a):\line     c = \cf5 1\line     \cf2 for \cf4 i \cf2 in \cf6 range\cf4 (\cf6 len\cf4 (a)):\line         c = a[i] * c\line     \cf6 print\cf4 (c)\line FUN([\cf5 2\cf2 ,\cf5 3\cf2 ,\cf5 4\cf2 ,\cf5 5\cf2 ,\cf5 56\cf4 ])\par

\pard\widctlpar\cf1\f1\fs21\par
Problem 15:\~\b Write a Python function to check whether a string is pangram or not.\b0\par

\pard\cbpat8\widctlpar\li480\ri480\sb240\sa240\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\highlight8\f4 Note : Pangrams are words or sentences containing every letter of the alphabet at least once.\par
For example : "The quick brown fox jumps over the lazy dog"\par

\pard\box\brdrdash\brdrw0 \li480\ri480\sb240\sa240\cf4\highlight0\fs20\line\cf2\f2 def \cf3 FUN\cf4 (x):\line     a = \cf7 'abcdefghijklmnopqrstuvwxyz'\line     \cf2 for \cf4 i \cf2 in \cf4 a:\line         \cf2 if \cf4 i \cf2 not in \cf4 x.lower():\line             \cf6 print\cf4 (\cf2 False\cf4 )\line             \cf2 break\line     else\cf4 :\line         \cf6 print\cf4 (\cf2 True\cf4 )\line FUN(\cf7 'the quick brown fox jumps over the lazy dog'\cf4 )\line\par

\pard\cbpat8\widctlpar\li480\ri480\sb240\sa240\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\cf1\f4\fs21\par

\pard\widctlpar\sa160\sl252\slmult1\cf0\f3\fs22\par

\pard\sa200\sl276\slmult1\f6\lang9\par
}
 